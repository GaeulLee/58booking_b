<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="goodee.gdj58.booking_c.mapper.taehee.CompanyMapper3">
	<!-- 스케줄러 -->
	<!-- 1) 예약 안내 -->
	<select id="selectMail" resultType="java.util.Map">
		SELECT b.booking_no bookingNo
			, b.customer_id cusId
			, b.booking_company_id comId
			, b.booking_date date
			, b.product_no productNo
			, b.booking_people people
			, c.customer_name cusName
			, c.customer_email cusEmail
			, com.booking_company_name comName
			, p.booking_product_name productName
			, CONCAT(com.booking_company_address,com.booking_company_address_detail) comAddress
			, com.booking_company_phone comPh
		FROM booking b
		LEFT OUTER JOIN customer c
		ON b.customer_id = c.customer_id
		LEFT OUTER JOIN booking_company com
		ON b.booking_company_id = com.booking_company_id
		INNER JOIN booking_product p
		ON b.product_no = p.booking_product_no
		WHERE b.booking_state = '예약확정' AND c.customer_email_marketing_accept = '동의' AND DATEDIFF(CURDATE(), b.booking_date) = -1
		GROUP BY SUBSTRING(b.booking_request_date, 1, 18), b.booking_company_id, b.customer_id
	</select>

	<!-- 상품관리 -->
	<!-- 4) 상세보기 -->
	<select id="selectProductOne" resultType="java.util.Map">
		SELECT booking_product_no productNo
			, booking_product_name productName
			, booking_product_price productPrice
			, booking_product_open open
			, booking_product_open productOpen
			, booking_product_min_people productMin
			, booking_product_max_people productMax
		FROM booking_product
		WHERE booking_product_no = #{productNo}
	</select>
	<select id="selectProductOption" resultType="java.util.Map">
		SELECT booking_product_option_name optionName
			, booking_product_option_no optionNo
			, booking_product_option_memo optionMemo
			, booking_product_option_price optionPrice
		FROM booking_product_option 
		WHERE booking_product_no = #{productNo}
	</select>
	<select id="selectOffday" resultType="java.util.Map">
		SELECT p.booking_product_offday_date offday
			, p.booking_product_offday_memo memo
		FROM booking_product_offday p
		WHERE p.booking_product_no = #{productNo}
		UNION ALL
		SELECT c.booking_company_offday_date offday
			, c.booking_company_offday_memo memo
		FROM booking_company_offday c
		WHERE c.booking_company_id = #{comId}
	</select>
	<select id="selectProductImg" resultType="java.util.Map">
		SELECT booking_product_img_save_name productImg
		FROM booking_product_img 
		WHERE booking_product_no = #{productNo}
	</select>
	<select id="selectProductOffday" resultType="java.util.Map">
		SELECT booking_product_offday_no offdayNo
		, booking_product_offday_date offday
		, booking_product_offday_memo memo
		FROM booking_product_offday 
		WHERE booking_product_no = #{productNo}
	</select>
	
	<!-- 3) 수정 -->
	<update id="updateProduct" parameterType="goodee.gdj58.booking_c.vo.Product">
		UPDATE booking_product SET booking_product_open = #{productOpen} WHERE booking_product_no = #{productNo}
	</update>
	<update id="updateProductOffday" parameterType="goodee.gdj58.booking_c.vo.ProductOffday">
		UPDATE booking_product_offday SET booking_product_offday_date = #{productOffdayDate} , booking_product_offday_memo = #{productOffdayMemo} WHERE booking_product_offday_no = #{productOffdayNo};
	</update>
	<delete id="deleteProductOffday">
		DELETE FROM booking_product_offday WHERE booking_product_offday_no = #{productOffdayNo}
	</delete>
	<update id="updateProducOne" parameterType="goodee.gdj58.booking_c.vo.Product">
		UPDATE booking_product 
		SET booking_product_name = #{productName}
			, booking_product_price = #{productPrice}
			, booking_product_open = #{productOpen}
			, booking_product_max_people = #{productMaxPeople}
			, booking_product_min_people = #{productMinPeople}
		WHERE booking_product_no = #{productNo}
	</update>
	<delete id="deleteOption">
		DELETE FROM booking_product_option WHERE booking_product_option_no = #{productOptionNo}
	</delete>
	<update id="updateOption" parameterType="goodee.gdj58.booking_c.vo.ProductOption">
		UPDATE booking_product_option 
		SET booking_product_option_name = #{productOptionName}
			, booking_product_option_memo = #{productOptionMemo}
			, booking_product_option_price = #{productOptionPrice}
		WHERE booking_product_option_no = #{productOptionNo}
	</update>
	
	<!-- 2) 등록 -->
	<insert id="insertImg" parameterType="goodee.gdj58.booking_c.vo.ProductImg">
		INSERT booking_product_img(
				booking_product_no
				, booking_product_img_save_name
				, booking_product_img_origin_name
				, booking_product_img_kind
				, booking_product_img_size
		) VALUES (
				#{productNo}
				, #{productImgSaveName}
				, #{productImgOriginName}
				, #{productImgKind}
				, #{productImgSize}
		)
	</insert>
	<insert id="insertOffday" parameterType="goodee.gdj58.booking_c.vo.ProductOffday">
		INSERT booking_product_offday(
				booking_product_no
				, booking_product_offday_date
				, booking_product_offday_memo
		) VALUES (
				#{productNo}
				, #{productOffdayDate}
				, #{productOffdayMemo}
		)
	</insert>
	<insert id="insertOption" parameterType="goodee.gdj58.booking_c.vo.ProductOption">
		INSERT booking_product_option(
				booking_product_no
				, booking_product_option_name
				, booking_product_option_memo
				, booking_product_option_price
		) VALUES (
			#{productNo}
			, #{productOptionName}
			, #{productOptionMemo}
			, #{productOptionPrice}
		)
		
	</insert>
	<insert id="insertProduct"  parameterType="goodee.gdj58.booking_c.vo.Product">
		INSERT booking_product(
				booking_company_id
				, booking_product_name
				, booking_product_price
				, booking_product_open
				, booking_product_min_people
				, booking_product_max_people
		) VALUES(
				#{companyId}
				, #{productName}
				, #{productPrice}
				, #{productOpen}
				, #{productMinPeople}
				, #{productMaxPeople});
		<selectKey resultType="int" keyProperty="productNo" keyColumn="booking_product_no" order="AFTER">
        	SELECT LAST_INSERT_ID()
    	</selectKey> 
	</insert>
	
	<!-- 1) 목록 -->
	<select id="selectProduct" resultType="java.util.Map" parameterType="java.util.Map">
		SELECT
			p.booking_product_no productNo  
			, p.booking_product_name name
			, p.booking_product_price price
			, p.booking_product_open open
			, p.booking_product_max_people max
			, p.booking_product_min_people min
			, i.booking_product_img_save_name img
			, COUNT(b.booking_no) bookingCount
			, COUNT(r.booking_no) reviewCount
			, AVG(r.star_rating) reviewRating
		FROM booking_product p 
		LEFT OUTER JOIN (SELECT DISTINCT booking_product_no
							, booking_product_img_save_name
						FROM booking_product_img
						GROUP BY booking_product_no) i
		ON p.booking_product_no = i.booking_product_no
		LEFT OUTER JOIN booking b
		ON p.booking_product_no = b.product_no
		LEFT OUTER JOIN review r
		ON b.booking_no = r.booking_no
		WHERE p.booking_company_id = #{loginCom.companyId}
		GROUP BY p.booking_product_no
		ORDER BY p.booking_product_open ASC, p.booking_product_no DESC
		LIMIT #{beginRow}, #{rowPerPage}
	</select>
	<select id="productCount" resultType="int">
		SELECT COUNT(*) 
		FROM booking_product 
		WHERE booking_company_id = #{companyId}
	</select>
	<select id="selectCompanyOffday" resultType="java.util.Map">
		SELECT
			booking_company_offday_date offday
			, booking_company_offday_memo memo
		FROM booking_company_offday
		WHERE booking_company_id = #{companyId}
	</select>
	
	<!-- 예약관리 -->
	<!-- 4) 상세보기 -->
	<select id="selectBookingOne" resultType="java.util.Map">
		SELECT
			b.booking_no bookingNo 
			, b.booking_state state
			, b.booking_company_id comId
			, c.customer_name cusName
			, c.customer_email cusEmail
			, c.customer_phone customerPh
			, SUBSTRING(b.booking_date, 1, 16) date
			, b.booking_request_date requestDate
			, bp.booking_product_name productName
			, b.booking_people people
			, b.booking_total_price price
			, o.booking_product_option_name oName
			, o.booking_product_option_memo oMemo
			, bc.cancel_memo cancleMemo
			, bc.createdate cancleDate
		FROM booking b 
			INNER JOIN booking_product bp 
			ON b.product_no = bp.booking_product_no 
			INNER JOIN customer c 
			ON b.customer_id = c.customer_id 
			LEFT OUTER JOIN booking_product_option o 
			ON b.option_no = o.booking_product_option_no 
			LEFT OUTER JOIN booking_cancel bc
			ON b.booking_no = bc.booking_no
		WHERE SUBSTRING(b.booking_request_date, 1, 18) = SUBSTRING(#{requestDate}, 1, 18) 
				AND b.booking_company_id = #{companyId}
				AND SUBSTRING(b.booking_date, 1, 16) = SUBSTRING(#{bookingDate}, 1, 16)
	</select>
	<!-- 3) 취소 -->
	<insert id="insertBookingCancel">
		INSERT booking_cancel(booking_no, cancel_memo, cancel_subject) VALUES(#{bookingNo}, #{cancelMemo}, #{cancelSubject})
	</insert>
	
	<!-- 2) 변경 -->
	<update id="updateBooking" parameterType="goodee.gdj58.booking_c.vo.Booking">
		UPDATE booking SET booking_state = #{bookingState} WHERE booking_no = #{bookingNo}
	</update>
	
	<!-- 1) 목록 -->
	<select id="selectBooking" resultType="java.util.Map" parameterType="java.util.Map">
		SELECT
			b.booking_no bookingNo 
			, b.booking_state state
			, b.booking_company_id comId
			, c.customer_name cusName
			, c.customer_email cusEmail
			, c.customer_phone customerPh
			, b.booking_date date
			, b.booking_request_date requestDate
			, bp.booking_product_name productName
			, bp.booking_product_no productNo
			, b.booking_people people
			, b.booking_total_price price
			, i.booking_product_img_save_name img
		FROM booking b 
			INNER JOIN booking_product bp 
			ON b.product_no = bp.booking_product_no 
			INNER JOIN customer c 
			ON b.customer_id = c.customer_id 
			LEFT OUTER JOIN 
			(SELECT DISTINCT booking_product_no, booking_product_img_save_name FROM booking_product_img GROUP BY booking_product_no) i
			ON b.product_no = i.booking_product_no
		WHERE b.booking_company_id = #{loginCom.companyId}
		GROUP BY b.booking_date
		ORDER BY b.booking_state ASC, b.booking_no DESC
		LIMIT #{beginRow}, #{rowPerPage}
	</select>
	<select id="bookingCount" resultType="int">
		SELECT COUNT(c.count) cnt
		FROM (
			SELECT COUNT(booking_date) count
				FROM booking 
				WHERE booking_company_id = 'com20'
				GROUP BY booking_date
			) c
	</select>
	
	<!-- 문의사항 -->
	<!-- 4) 상세보기 -->
	<select id="selectQuestionOne" resultType="java.util.Map">
		SELECT 
			q.question_no questionNo
			, q.question_title questionTitle
			, q.question_memo questionMemo
			, q.createdate questionCreatedate
			, qa.question_comment answer
			, qa.createdate answerCreatedate
		FROM question q 
			LEFT OUTER JOIN question_answer qa
			ON q.question_no = qa.question_no 
		WHERE q.question_no = #{questionNo}
	
	</select>
	
	<!-- 3) 삭제 -->
	<delete id="deleteQuestion" parameterType="int">
		DELETE FROM question WHERE question_no = #{questionNo}
	</delete>
	
	<!-- 2) 등록 -->	
	<insert id="insertQuestion" parameterType="goodee.gdj58.booking_c.vo.Question">
		INSERT question(question_title, question_memo, id) VALUES(#{questionTitle}, #{questionMemo}, #{id}) 
	</insert>
	
	<!-- 1) 목록 -->
	<select id="selectQuestion" resultType="java.util.Map" parameterType="java.util.Map">
		SELECT
			q.question_no questionNo 
			, q.question_title questionTitle
			, q.question_memo questionMemo
			, q.createdate
			, qa.question_comment questionComment
		FROM question q
			LEFT OUTER JOIN question_answer qa
			ON q.question_no = qa.question_no 
		WHERE q.id = #{loginCom.companyId}
		ORDER BY q.question_no DESC
		LIMIT #{beginRow}, #{rowPerPage}
	</select>
	<select id="questionCount" resultType="int">
		SELECT COUNT(*) 
		FROM question
		WHERE id = #{companyId}
	</select>
</mapper>